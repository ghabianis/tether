#+title: Todo

* TODO Now [1/6]
** DONE Syntax Highlighting!
Will do it manually using tree-sitter library.

Need to replicate this configure code here: https://github.com/tree-sitter/tree-sitter/blob/1c65ca24bc9a734ab70115188f465e12eecf224e/highlight/src/lib.rs#L366

This allows to basically filter recognized queries (see the make_highlights! call in glyph source code in syntax/src/lib.rs)
*** DONE fix cursor
black letter glyph no longer rendering on top bc we switched order
*** DONE handle scoped recognized names
e.g. a theme might only recognize =@keyword=, but query might match on =@keyword.function= (this happens in zig grammar currently)

currently theme is an array indexed by capture name index (e.g. @keyword.function => 0, @punctuation => 1, etc.)

the code to do this is here:
https://github.com/tree-sitter/tree-sitter/blob/1c65ca24bc9a734ab70115188f465e12eecf224e/highlight/src/lib.rs#L366
*** DONE newline/whitespace (any glyph we dont have vertices for) fuck up syntax highlighting
cause we assume 1 char => 6 vertices
on whitespace we dont add any vertices
fucks up indexing into the vertices buffer

two solutions:
1. store mapping from CharIndex -> VertexIndex
2. simply add vertices for whitespace ::
   if we switch to instanced rendering this may not be thaaat bad
   right now we need 6 vertex for each char and  color and tex coord for each vertex
   instead 6 vertices upfront
   & top left and bot right pos (2 x Float2)
   & color (1 x Float4)
   & top left and bot right tex coord (2 x Float 2)
   => 3 x Float4
   => 12 bytes per char
3. do syntax higlighting first, store color for each char

** TODO bug: word breaking with punctuation detection for w/W/e/E/b/B
Word breaking rules are fucked.

Word can break in 3 cases:
- when whitespace is encountered
- when punctuation is encountered IF the word is comprised of NON-punctuation characters
- whenn non-punctuation is encountered IF the word is comprised of punctuation characters

This means there are two types of words, those comprised of punctuation characters, and those that dont!

For example:
#+begin_src
fuck+++yay!
#+end_src
with the cursor on the first =+=, pressing =w= should bring the cursor the first =y=. instead it goes to the next =+=.

Another case
#+begin_src zig
fn fuck(self: *Self) void {

}
#+end_src
With cursor on =k=, pressing =E= should go to =(= but instead goes to end of =self=.

** TODO moving up/down/creating lines preserves word column when possible
example:
#+begin_src zig
pub fn start_of_line(self: *Self) void {
    self.cursor.col = 0;
    self.draw_text = true;
}
#+end_src

if cursor is at =s= in =start_of_line= (index 7)

when going down, cursor will try to be on index 7 if possible, if not then the greatest char possible
** TODO bug: semicolon texture fucked up
if you look at the atlas, the =)= glyph is intersecting with the =;= glyph.
** TODO bug: delete/change move still not correct
ex: de or ce on this text with cursor at 0:
#+begin_src
self nice
#+end_src

remainder should be:
#+begin_src
 nice
#+end_src

instead is:
#+begin_src
f nice
#+end_src
** TODO bug: =cc= (change line) should preserve line and not delete it entirely
* TODO Later [0/4]
** TODO cursor on ligature glyph should render the regular glyph on top of cursor
** TODO add new ligatures to atlas when encountered
easiest to rebuild atlas from scratch again

later can do this off main thread so rendering isn't interrupted

** TODO event loop or some mechanism to do work without stalling frame
** TODO create deinit function for renderer/editor
** TODO Egui for debugging?
** TODO curves svg etc
* Archive
** DONE Fix cursor [0/0]
*** DONE not in front of text
*** DONE newline fucks it up
** DONE next line is not starting at the right Y
we use =max_glyph_h= as the Y advance
but this is not correct
it needs to take into account glyphs that have their y origin lower
for example in the glyph 'y'
i think this might be the 'descent' font metric
