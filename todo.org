#+title: Todo

* TODO Now [2/6]
** TODO vertex buffer no need to create each time
instead check if <= to current, if so just append
otherwise create new
** TODO move particle simulation to GPU
cluster opacity/velocity can still be computed on the CPU, but the updating particles can be computed on the GPU.
** DONE Bug bash [0/0]
*** DONE selection rendering messed up
*** DONE deleting text
#+begin_src zig
fn testFn(self: *Self) void {
    switch (self) {
        .Foo => {

        },
    }
}
#+end_src

start selection on comma
move to the =.= on the line with =.Foo=
delete

it crashes
*** DONE backspacing on start of line fucked
** TODO Status line
*** BRAINSTORM
- what we want ::
  - current file path relative to project root
  - current line / col
  - vim mode

** TODO sweep thru code for objc memory leaks
there are probably lots of places where i am not freeing objc objects
** DONE bug: =cc= (change line) should preserve line and not delete it entirely
* TODO Later [0/11]
** TODO simd math data structures
** TODO (refactor) coalesce the text geometry building code for =build_text_geometry()= and =build_line_number_geometry()=
** TODO (perf) only build line number geometry for lines we see
** TODO (perf) only build text geometry for text we see?
** TODO (bug) cursor on ligature glyph should render the regular glyph on top of cursor
** TODO (feat) add new ligatures to atlas when encountered
easiest to rebuild atlas from scratch again

later can do this off main thread so rendering isn't interrupted
** TODO (perf) don't render/rebuild geometry if not needed
especially right now we rebuild all text when moving cursor as ez way to redraw cursor since it depends on text position

now we this charIdxToVertexIdx map we create in create_text_geometry, we can save this and use it to get their
vertices of a given char, so we can redraw the crusor without having to call =create_text_geometry= again.
** TODO (perf) don't output existing glyphs in the atlas
some ligatures like =//= and =///= reuse the same glyph
but we are being lazy and not checking for this and adding redundant glyphs to the atlas
** TODO event loop or some mechanism to do work without stalling frame
** TODO create deinit function for renderer/editor
** TODO Egui for debugging?
** TODO curves svg etc
* TODO Content/Brainstorm [0/14]
** TODO improve particles with glow
look at these: https://www.shadertoy.com/view/lldGzr
** TODO lightning effect
** TODO sound effects
https://x.com/lightbulbfeed/status/1706441132992057604?s=20
** TODO squiggly lines effect
** TODO what to do with the background?
*** TODO cool effect
*** TODO what about showing documentation or diagrams, and easily hide code to flip back and forth
** TODO radial menu for LSP code actions
#+caption: like this but for LSP code actions
[[~/roam/images/49c0bf097a7f7df4b9889ba826c36fea.jpg]]
** TODO better theme changing UI
lets you click on a piece of text, and a GUI pops up to edit the theme right there
** TODO motion blur effect on scroll
will make a VIM user look insanely fast and coo l
** TODO preview VIM command
for example pressing "d e", you can prefix with some key and it will show you a preview of what will happen (like a GitHub inline diff, similar to what emacs does when you do search and replace)
** TODO drag around syntax nodes
would be cool to do this, for example swapping order of parameters
** TODO WPM bottom right
** TODO screen crack when going too hard
https://x.com/GrahamFleming_/status/1706356048821620907?s=20
** TODO autocomplete suggestions slam onto the screen
** TODO errors should burn
https://x.com/xldenis/status/1706552511925002537?s=20
* Archive
** DONE Fix cursor [0/0]
*** DONE not in front of text
*** DONE newline fucks it up
** DONE next line is not starting at the right Y
we use =max_glyph_h= as the Y advance
but this is not correct
it needs to take into account glyphs that have their y origin lower
for example in the glyph 'y'
i think this might be the 'descent' font metric
